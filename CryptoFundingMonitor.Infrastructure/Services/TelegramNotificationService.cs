using CryptoFundingMonitor.Core.Models;
using CryptoFundingMonitor.Core.Services;
using System.Diagnostics;
using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;

namespace CryptoFundingMonitor.Infrastructure.Services
{
    /// <summary>
    /// –°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram
    /// </summary>
    public class TelegramNotificationService : INotificationService
    {
        private ITelegramBotClient _botClient;
        private string _botToken;

        /// <summary>
        /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä TelegramNotificationService
        /// </summary>
        public TelegramNotificationService()
        {
            // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è DI
        }

        /// <summary>
        /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å —Å —Ç–æ–∫–µ–Ω–æ–º –±–æ—Ç–∞
        /// </summary>
        /// <param name="botToken">–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞</param>
        public void Initialize(string botToken)
        {
            _botToken = botToken ?? throw new ArgumentNullException(nameof(botToken));
            _botClient = new TelegramBotClient(_botToken);
            Debug.WriteLine($"[TelegramNotificationService] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —Ç–æ–∫–µ–Ω–æ–º: {_botToken.Substring(0, 10)}...");
        }

        /// <summary>
        /// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–∏–≥–Ω–∞–ª–µ —Å—Ç–∞–≤–∫–∏ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è –≤ Telegram
        /// </summary>
        /// <param name="signal">–°–∏–≥–Ω–∞–ª —Å—Ç–∞–≤–∫–∏ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è</param>
        /// <param name="chatId">ID —á–∞—Ç–∞ –≤ Telegram</param>
        /// <param name="tradeBotUrl">URL —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</param>
        public async Task SendNotificationAsync(FundingRateSignal signal, long chatId, string tradeBotUrl)
        {
            try
            {
                if (_botClient == null)
                {
                    throw new InvalidOperationException("TelegramNotificationService –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –í—ã–∑–æ–≤–∏—Ç–µ Initialize() –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º.");
                }

                var message = FormatMessage(signal, tradeBotUrl);

                Debug.WriteLine($"[TelegramNotificationService] –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chatId}");
                Debug.WriteLine($"[TelegramNotificationService] –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:\n{message}");

                await _botClient.SendMessage(
                    chatId: new ChatId(chatId),
                    text: message,
                    parseMode: ParseMode.Markdown,
                    linkPreviewOptions: new LinkPreviewOptions { IsDisabled = true }
                );

                Debug.WriteLine($"[TelegramNotificationService] –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chatId}");
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"[TelegramNotificationService] –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {ex.Message}");
                Debug.WriteLine($"[TelegramNotificationService] Stack trace: {ex.StackTrace}");
                throw new Exception($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram: {ex.Message}", ex);
            }
        }

        /// <summary>
        /// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –¢–ó
        /// </summary>
        private string FormatMessage(FundingRateSignal signal, string tradeBotUrl)
        {
            // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –±–∏—Ä–∂—É
            var exchangeUrl = GetExchangeUrl(signal.ExchangeName, signal.Pair);
            
            // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ CoinGlass
            var coinGlassUrl = GetCoinGlassUrl(signal.ExchangeName, signal.Pair);

            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
            var timestamp = signal.Timestamp.ToString("yyyy-MM-dd HH:mm:ss") + " UTC";

            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å Markdown —Ä–∞–∑–º–µ—Ç–∫–æ–π
            var message = $"‚ö´Ô∏è [{signal.ExchangeName}]({exchangeUrl}) - [{signal.Symbol}]({coinGlassUrl}) - {signal.Pair}\n";
            message += "üü¢ Analyzing Buy ‚¨ÜÔ∏è\n";
            message += $"üÖøÔ∏è {signal.CurrentPrice:F4}\n";
            message += $"üìÉ {signal.FundingRate:F4}\n";

            // –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É Trade —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ URL –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
            if (!string.IsNullOrWhiteSpace(tradeBotUrl))
            {
                message += $"[üåê Trade]({tradeBotUrl})\n";
            }

            message += $"Since: {timestamp}";

            return message;
        }

        /// <summary>
        /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–∞ —Å–∞–π—Ç–µ –±–∏—Ä–∂–∏
        /// </summary>
        private string GetExchangeUrl(string exchangeName, string pair)
        {
            return exchangeName.ToUpper() switch
            {
                "BINANCE" => $"https://www.binance.com/en/futures/{pair}",
                "BYBIT" => $"https://www.bybit.com/trade/usdt/{pair}",
                "MEXC" => $"https://futures.mexc.com/exchange/{pair.Replace("USDT", "_USDT")}",
                _ => $"https://www.{exchangeName.ToLower()}.com"
            };
        }

        /// <summary>
        /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–∞ CoinGlass
        /// </summary>
        private string GetCoinGlassUrl(string exchangeName, string pair)
        {
            // CoinGlass –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç: https://www.coinglass.com/tv/Binance_BTCUSDT
            var formattedExchange = exchangeName switch
            {
                "MEXC" => "MEXC",
                _ => char.ToUpper(exchangeName[0]) + exchangeName.Substring(1).ToLower()
            };

            return $"https://www.coinglass.com/tv/{formattedExchange}_{pair}";
        }
    }
}